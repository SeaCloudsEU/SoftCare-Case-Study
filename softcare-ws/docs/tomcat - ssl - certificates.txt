
self signed certificates for Tomcat 7 - (APR) [https://devcenter.heroku.com/articles/ssl-certificate-self]


1. Generate self signed certificates

	openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
	openssl rsa -passin pass:x -in server.pass.key -out server.key

	openssl req -new -key server.key -out server.csr

	openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
	
	
2. Configure Tomcat for HTTPS use

	server.xml (tomcat)
 
		...
		 <Connector port="8443" scheme="https" secure="true" SSLEnabled="true" 
					SSLCertificateFile="C:\PROYECTOS\keystore\server.crt" 
					SSLCertificateKeyFile="C:\PROYECTOS\keystore\server.key" 
					SSLPassword="tomcat7" keyAlias="tomcat"/>
		...
		
3. Tomcat 7 HTTP to HTTPS redirect
	It is assumed that the following TCP ports are used for that purpose:
		8080: for HTTP
		8443: for HTTPS 
	Please, follow the exact steps as described below to get it done.

	Configuration

		1) Update server.xml configuration file in Tomcat home directory and change the following part of its configuration:

			<Connector port="8080" protocol="HTTP/1.1"
					   connectionTimeout="20000"
					   URIEncoding="UTF-8"
					   redirectPort="8443" />

			to what's shown below:

			<Connector port="8080" enableLookups="false"
					   redirectPort="8443" />

		2) Update web.xml configuration file in Tomcat home directory and add the following content into the end before the closing </web-app> markup:

			<security-constraint>
				<web-resource-collection>
				<web-resource-name>Protected Context</web-resource-name>
				<url-pattern>/*</url-pattern>
				</web-resource-collection>
				<!-- auth-constraint goes here if you requre authentication -->
				<user-data-constraint>
				<transport-guarantee>CONFIDENTIAL</transport-guarantee>
				</user-data-constraint>
			</security-constraint>